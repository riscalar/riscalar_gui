// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'cpu/latency_core/components/cache.dart';
import 'cpu/latency_core/components/functional_unit_pool.dart';
import 'cpu/latency_core/latency_args.dart';
import 'cpu/register.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.22';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'riscalar',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<SimulationResult> runSimulationFunctional(
      {required String binaryPath, dynamic hint});

  Future<SimulationResult> runSimulationLatency(
      {required LatencyArgs args, dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<SimulationResult> runSimulationFunctional(
      {required String binaryPath, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(binaryPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simulation_result,
        decodeErrorData: null,
      ),
      constMeta: kRunSimulationFunctionalConstMeta,
      argValues: [binaryPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunSimulationFunctionalConstMeta => const TaskConstMeta(
        debugName: "run_simulation_functional",
        argNames: ["binaryPath"],
      );

  @override
  Future<SimulationResult> runSimulationLatency(
      {required LatencyArgs args, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_latency_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simulation_result,
        decodeErrorData: null,
      ),
      constMeta: kRunSimulationLatencyConstMeta,
      argValues: [args],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunSimulationLatencyConstMeta => const TaskConstMeta(
        debugName: "run_simulation_latency",
        argNames: ["args"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BlockReplacement dco_decode_block_replacement(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BlockReplacement.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  LatencyArgs dco_decode_box_autoadd_latency_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_latency_args(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  XRegisterFile dco_decode_box_autoadd_x_register_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_x_register_file(raw);
  }

  @protected
  CacheConfig dco_decode_cache_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return CacheConfig(
      il1: dco_decode_cache_options(arr[0]),
      dl1: dco_decode_cache_options(arr[1]),
      il2: dco_decode_cache_options(arr[2]),
      dl2: dco_decode_cache_options(arr[3]),
    );
  }

  @protected
  CacheOptions dco_decode_cache_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CacheOptions_None();
      case 1:
        return CacheOptions_Unified();
      case 2:
        return CacheOptions_Configured(
          numSets: dco_decode_u_64(raw[1]),
          associativity: dco_decode_u_64(raw[2]),
          blockSize: dco_decode_u_64(raw[3]),
          replacementPolicy: dco_decode_block_replacement(raw[4]),
          latency: dco_decode_u_64(raw[5]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CommitConfig dco_decode_commit_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CommitConfig(
      commitWidth: dco_decode_opt_box_autoadd_u_8(arr[0]),
    );
  }

  @protected
  DecodeConfig dco_decode_decode_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DecodeConfig(
      decodeWidth: dco_decode_opt_box_autoadd_u_8(arr[0]),
    );
  }

  @protected
  FetchConfig dco_decode_fetch_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FetchConfig(
      fetchQueueSize: dco_decode_opt_box_autoadd_u_16(arr[0]),
      fetchSpeed: dco_decode_opt_box_autoadd_u_8(arr[1]),
      fetchBranchPenalty: dco_decode_opt_box_autoadd_u_64(arr[2]),
    );
  }

  @protected
  FunctionalUnitGroupCfg dco_decode_functional_unit_group_cfg(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FunctionalUnitGroupCfg(
      operationLatency: dco_decode_u_64(arr[0]),
      issueLatency: dco_decode_u_64(arr[1]),
      numUnits: dco_decode_usize(arr[2]),
    );
  }

  @protected
  FunctionalUnitPoolConfig dco_decode_functional_unit_pool_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FunctionalUnitPoolConfig(
      ialu: dco_decode_functional_unit_group_cfg(arr[0]),
      imult: dco_decode_functional_unit_group_cfg(arr[1]),
      idiv: dco_decode_functional_unit_group_cfg(arr[2]),
      load: dco_decode_functional_unit_group_cfg(arr[3]),
      store: dco_decode_functional_unit_group_cfg(arr[4]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  IssueConfig dco_decode_issue_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return IssueConfig(
      issueWidth: dco_decode_opt_box_autoadd_u_8(arr[0]),
      issueOrder: dco_decode_issue_order(arr[1]),
      issueNoMisspec: dco_decode_bool(arr[2]),
    );
  }

  @protected
  IssueOrder dco_decode_issue_order(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IssueOrder.values[raw as int];
  }

  @protected
  LatencyArgs dco_decode_latency_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return LatencyArgs(
      binaryPath: dco_decode_String(arr[0]),
      rsqSize: dco_decode_opt_box_autoadd_u_16(arr[1]),
      lsqSize: dco_decode_opt_box_autoadd_u_16(arr[2]),
      runConfig: dco_decode_run_config(arr[3]),
      fetchConfig: dco_decode_fetch_config(arr[4]),
      decodeConfig: dco_decode_decode_config(arr[5]),
      issueConfig: dco_decode_issue_config(arr[6]),
      commitConfig: dco_decode_commit_config(arr[7]),
      functionalUnitPoolConfig: dco_decode_functional_unit_pool_config(arr[8]),
      memoryConfig: dco_decode_memory_config(arr[9]),
      cacheConfig: dco_decode_cache_config(arr[10]),
    );
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Uint64List.from(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MemoryConfig dco_decode_memory_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MemoryConfig(
      memoryBusWidth: dco_decode_u_8(arr[0]),
      memoryLatency: dco_decode_opt_list_prim_u_64_strict(arr[1]),
    );
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_16(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  Uint64List? dco_decode_opt_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_64_strict(raw);
  }

  @protected
  RunConfig dco_decode_run_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return RunConfig(
      fastForward: dco_decode_opt_box_autoadd_u_64(arr[0]),
      maxInstrs: dco_decode_opt_box_autoadd_u_64(arr[1]),
      statInterval: dco_decode_opt_list_prim_u_64_strict(arr[2]),
      statFreq: dco_decode_opt_box_autoadd_u_64(arr[3]),
    );
  }

  @protected
  SimulationResult dco_decode_simulation_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SimulationResult_Success(
          dco_decode_box_autoadd_x_register_file(raw[1]),
          dco_decode_String(raw[2]),
          dco_decode_String(raw[3]),
        );
      case 1:
        return SimulationResult_Error(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  U64Array32 dco_decode_u_64_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U64Array32(dco_decode_list_prim_u_64_strict(raw));
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  XRegisterFile dco_decode_x_register_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return XRegisterFile(
      regs: dco_decode_u_64_array_32(arr[0]),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BlockReplacement sse_decode_block_replacement(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BlockReplacement.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  LatencyArgs sse_decode_box_autoadd_latency_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_latency_args(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_16(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  XRegisterFile sse_decode_box_autoadd_x_register_file(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_x_register_file(deserializer));
  }

  @protected
  CacheConfig sse_decode_cache_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_il1 = sse_decode_cache_options(deserializer);
    var var_dl1 = sse_decode_cache_options(deserializer);
    var var_il2 = sse_decode_cache_options(deserializer);
    var var_dl2 = sse_decode_cache_options(deserializer);
    return CacheConfig(il1: var_il1, dl1: var_dl1, il2: var_il2, dl2: var_dl2);
  }

  @protected
  CacheOptions sse_decode_cache_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return CacheOptions_None();
      case 1:
        return CacheOptions_Unified();
      case 2:
        var var_numSets = sse_decode_u_64(deserializer);
        var var_associativity = sse_decode_u_64(deserializer);
        var var_blockSize = sse_decode_u_64(deserializer);
        var var_replacementPolicy = sse_decode_block_replacement(deserializer);
        var var_latency = sse_decode_u_64(deserializer);
        return CacheOptions_Configured(
            numSets: var_numSets,
            associativity: var_associativity,
            blockSize: var_blockSize,
            replacementPolicy: var_replacementPolicy,
            latency: var_latency);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CommitConfig sse_decode_commit_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_commitWidth = sse_decode_opt_box_autoadd_u_8(deserializer);
    return CommitConfig(commitWidth: var_commitWidth);
  }

  @protected
  DecodeConfig sse_decode_decode_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_decodeWidth = sse_decode_opt_box_autoadd_u_8(deserializer);
    return DecodeConfig(decodeWidth: var_decodeWidth);
  }

  @protected
  FetchConfig sse_decode_fetch_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fetchQueueSize = sse_decode_opt_box_autoadd_u_16(deserializer);
    var var_fetchSpeed = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_fetchBranchPenalty = sse_decode_opt_box_autoadd_u_64(deserializer);
    return FetchConfig(
        fetchQueueSize: var_fetchQueueSize,
        fetchSpeed: var_fetchSpeed,
        fetchBranchPenalty: var_fetchBranchPenalty);
  }

  @protected
  FunctionalUnitGroupCfg sse_decode_functional_unit_group_cfg(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_operationLatency = sse_decode_u_64(deserializer);
    var var_issueLatency = sse_decode_u_64(deserializer);
    var var_numUnits = sse_decode_usize(deserializer);
    return FunctionalUnitGroupCfg(
        operationLatency: var_operationLatency,
        issueLatency: var_issueLatency,
        numUnits: var_numUnits);
  }

  @protected
  FunctionalUnitPoolConfig sse_decode_functional_unit_pool_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ialu = sse_decode_functional_unit_group_cfg(deserializer);
    var var_imult = sse_decode_functional_unit_group_cfg(deserializer);
    var var_idiv = sse_decode_functional_unit_group_cfg(deserializer);
    var var_load = sse_decode_functional_unit_group_cfg(deserializer);
    var var_store = sse_decode_functional_unit_group_cfg(deserializer);
    return FunctionalUnitPoolConfig(
        ialu: var_ialu,
        imult: var_imult,
        idiv: var_idiv,
        load: var_load,
        store: var_store);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  IssueConfig sse_decode_issue_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_issueWidth = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_issueOrder = sse_decode_issue_order(deserializer);
    var var_issueNoMisspec = sse_decode_bool(deserializer);
    return IssueConfig(
        issueWidth: var_issueWidth,
        issueOrder: var_issueOrder,
        issueNoMisspec: var_issueNoMisspec);
  }

  @protected
  IssueOrder sse_decode_issue_order(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return IssueOrder.values[inner];
  }

  @protected
  LatencyArgs sse_decode_latency_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_binaryPath = sse_decode_String(deserializer);
    var var_rsqSize = sse_decode_opt_box_autoadd_u_16(deserializer);
    var var_lsqSize = sse_decode_opt_box_autoadd_u_16(deserializer);
    var var_runConfig = sse_decode_run_config(deserializer);
    var var_fetchConfig = sse_decode_fetch_config(deserializer);
    var var_decodeConfig = sse_decode_decode_config(deserializer);
    var var_issueConfig = sse_decode_issue_config(deserializer);
    var var_commitConfig = sse_decode_commit_config(deserializer);
    var var_functionalUnitPoolConfig =
        sse_decode_functional_unit_pool_config(deserializer);
    var var_memoryConfig = sse_decode_memory_config(deserializer);
    var var_cacheConfig = sse_decode_cache_config(deserializer);
    return LatencyArgs(
        binaryPath: var_binaryPath,
        rsqSize: var_rsqSize,
        lsqSize: var_lsqSize,
        runConfig: var_runConfig,
        fetchConfig: var_fetchConfig,
        decodeConfig: var_decodeConfig,
        issueConfig: var_issueConfig,
        commitConfig: var_commitConfig,
        functionalUnitPoolConfig: var_functionalUnitPoolConfig,
        memoryConfig: var_memoryConfig,
        cacheConfig: var_cacheConfig);
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MemoryConfig sse_decode_memory_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_memoryBusWidth = sse_decode_u_8(deserializer);
    var var_memoryLatency = sse_decode_opt_list_prim_u_64_strict(deserializer);
    return MemoryConfig(
        memoryBusWidth: var_memoryBusWidth, memoryLatency: var_memoryLatency);
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint64List? sse_decode_opt_list_prim_u_64_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_64_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RunConfig sse_decode_run_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fastForward = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_maxInstrs = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_statInterval = sse_decode_opt_list_prim_u_64_strict(deserializer);
    var var_statFreq = sse_decode_opt_box_autoadd_u_64(deserializer);
    return RunConfig(
        fastForward: var_fastForward,
        maxInstrs: var_maxInstrs,
        statInterval: var_statInterval,
        statFreq: var_statFreq);
  }

  @protected
  SimulationResult sse_decode_simulation_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_x_register_file(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        var var_field2 = sse_decode_String(deserializer);
        return SimulationResult_Success(var_field0, var_field1, var_field2);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return SimulationResult_Error(var_field0, var_field1);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  U64Array32 sse_decode_u_64_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_64_strict(deserializer);
    return U64Array32(inner);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  XRegisterFile sse_decode_x_register_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_regs = sse_decode_u_64_array_32(deserializer);
    return XRegisterFile(regs: var_regs);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_block_replacement(
      BlockReplacement self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_latency_args(
      LatencyArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_latency_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_x_register_file(
      XRegisterFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_x_register_file(self, serializer);
  }

  @protected
  void sse_encode_cache_config(CacheConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_cache_options(self.il1, serializer);
    sse_encode_cache_options(self.dl1, serializer);
    sse_encode_cache_options(self.il2, serializer);
    sse_encode_cache_options(self.dl2, serializer);
  }

  @protected
  void sse_encode_cache_options(CacheOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CacheOptions_None():
        sse_encode_i_32(0, serializer);
      case CacheOptions_Unified():
        sse_encode_i_32(1, serializer);
      case CacheOptions_Configured(
          numSets: final numSets,
          associativity: final associativity,
          blockSize: final blockSize,
          replacementPolicy: final replacementPolicy,
          latency: final latency
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_u_64(numSets, serializer);
        sse_encode_u_64(associativity, serializer);
        sse_encode_u_64(blockSize, serializer);
        sse_encode_block_replacement(replacementPolicy, serializer);
        sse_encode_u_64(latency, serializer);
    }
  }

  @protected
  void sse_encode_commit_config(CommitConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_8(self.commitWidth, serializer);
  }

  @protected
  void sse_encode_decode_config(DecodeConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_8(self.decodeWidth, serializer);
  }

  @protected
  void sse_encode_fetch_config(FetchConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_16(self.fetchQueueSize, serializer);
    sse_encode_opt_box_autoadd_u_8(self.fetchSpeed, serializer);
    sse_encode_opt_box_autoadd_u_64(self.fetchBranchPenalty, serializer);
  }

  @protected
  void sse_encode_functional_unit_group_cfg(
      FunctionalUnitGroupCfg self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.operationLatency, serializer);
    sse_encode_u_64(self.issueLatency, serializer);
    sse_encode_usize(self.numUnits, serializer);
  }

  @protected
  void sse_encode_functional_unit_pool_config(
      FunctionalUnitPoolConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_functional_unit_group_cfg(self.ialu, serializer);
    sse_encode_functional_unit_group_cfg(self.imult, serializer);
    sse_encode_functional_unit_group_cfg(self.idiv, serializer);
    sse_encode_functional_unit_group_cfg(self.load, serializer);
    sse_encode_functional_unit_group_cfg(self.store, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_issue_config(IssueConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_8(self.issueWidth, serializer);
    sse_encode_issue_order(self.issueOrder, serializer);
    sse_encode_bool(self.issueNoMisspec, serializer);
  }

  @protected
  void sse_encode_issue_order(IssueOrder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_latency_args(LatencyArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.binaryPath, serializer);
    sse_encode_opt_box_autoadd_u_16(self.rsqSize, serializer);
    sse_encode_opt_box_autoadd_u_16(self.lsqSize, serializer);
    sse_encode_run_config(self.runConfig, serializer);
    sse_encode_fetch_config(self.fetchConfig, serializer);
    sse_encode_decode_config(self.decodeConfig, serializer);
    sse_encode_issue_config(self.issueConfig, serializer);
    sse_encode_commit_config(self.commitConfig, serializer);
    sse_encode_functional_unit_pool_config(
        self.functionalUnitPoolConfig, serializer);
    sse_encode_memory_config(self.memoryConfig, serializer);
    sse_encode_cache_config(self.cacheConfig, serializer);
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_memory_config(MemoryConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.memoryBusWidth, serializer);
    sse_encode_opt_list_prim_u_64_strict(self.memoryLatency, serializer);
  }

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_64_strict(
      Uint64List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_64_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_run_config(RunConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_64(self.fastForward, serializer);
    sse_encode_opt_box_autoadd_u_64(self.maxInstrs, serializer);
    sse_encode_opt_list_prim_u_64_strict(self.statInterval, serializer);
    sse_encode_opt_box_autoadd_u_64(self.statFreq, serializer);
  }

  @protected
  void sse_encode_simulation_result(
      SimulationResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SimulationResult_Success(
          field0: final field0,
          field1: final field1,
          field2: final field2
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_x_register_file(field0, serializer);
        sse_encode_String(field1, serializer);
        sse_encode_String(field2, serializer);
      case SimulationResult_Error(field0: final field0, field1: final field1):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_64_array_32(U64Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_64_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_x_register_file(
      XRegisterFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64_array_32(self.regs, serializer);
  }
}
