// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.22";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_run_simulation_functional_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_simulation_functional",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_binary_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::simple::run_simulation_functional(
                        api_binary_path,
                    ))
                })())
            }
        },
    )
}
fn wire_run_simulation_latency_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_simulation_latency",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_args = <crate::cpu::latency_core::latency_args::LatencyArgs>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::simple::run_simulation_latency(api_args))
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::cpu::latency_core::components::cache::BlockReplacement {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::cpu::latency_core::components::cache::BlockReplacement::Lru,
            1 => crate::cpu::latency_core::components::cache::BlockReplacement::Fifo,
            2 => crate::cpu::latency_core::components::cache::BlockReplacement::Random,
            _ => unreachable!("Invalid variant for BlockReplacement: {}", inner),
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::CacheConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_il1 =
            <crate::cpu::latency_core::components::cache::CacheOptions>::sse_decode(deserializer);
        let mut var_dl1 =
            <crate::cpu::latency_core::components::cache::CacheOptions>::sse_decode(deserializer);
        let mut var_il2 =
            <crate::cpu::latency_core::components::cache::CacheOptions>::sse_decode(deserializer);
        let mut var_dl2 =
            <crate::cpu::latency_core::components::cache::CacheOptions>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::CacheConfig {
            il1: var_il1,
            dl1: var_dl1,
            il2: var_il2,
            dl2: var_dl2,
        };
    }
}

impl SseDecode for crate::cpu::latency_core::components::cache::CacheOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::cpu::latency_core::components::cache::CacheOptions::None;
            }
            1 => {
                return crate::cpu::latency_core::components::cache::CacheOptions::Unified;
            }
            2 => {
                let mut var_numSets = <u64>::sse_decode(deserializer);
                let mut var_associativity = <u64>::sse_decode(deserializer);
                let mut var_blockSize = <u64>::sse_decode(deserializer);
                let mut var_replacementPolicy =
                    <crate::cpu::latency_core::components::cache::BlockReplacement>::sse_decode(
                        deserializer,
                    );
                let mut var_latency = <u64>::sse_decode(deserializer);
                return crate::cpu::latency_core::components::cache::CacheOptions::Configured {
                    num_sets: var_numSets,
                    associativity: var_associativity,
                    block_size: var_blockSize,
                    replacement_policy: var_replacementPolicy,
                    latency: var_latency,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::CommitConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_commitWidth = <Option<u8>>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::CommitConfig {
            commit_width: var_commitWidth,
        };
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::DecodeConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_decodeWidth = <Option<u8>>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::DecodeConfig {
            decode_width: var_decodeWidth,
        };
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::FetchConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fetchQueueSize = <Option<u16>>::sse_decode(deserializer);
        let mut var_fetchSpeed = <Option<u8>>::sse_decode(deserializer);
        let mut var_fetchBranchPenalty = <Option<u64>>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::FetchConfig {
            fetch_queue_size: var_fetchQueueSize,
            fetch_speed: var_fetchSpeed,
            fetch_branch_penalty: var_fetchBranchPenalty,
        };
    }
}

impl SseDecode
    for crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_operationLatency = <u64>::sse_decode(deserializer);
        let mut var_issueLatency = <u64>::sse_decode(deserializer);
        let mut var_numUnits = <usize>::sse_decode(deserializer);
        return crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg{operation_latency: var_operationLatency, issue_latency: var_issueLatency, num_units: var_numUnits};
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ialu = <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_decode(deserializer);
        let mut var_imult = <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_decode(deserializer);
        let mut var_idiv = <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_decode(deserializer);
        let mut var_load = <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_decode(deserializer);
        let mut var_store = <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig {
            ialu: var_ialu,
            imult: var_imult,
            idiv: var_idiv,
            load: var_load,
            store: var_store,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::IssueConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_issueWidth = <Option<u8>>::sse_decode(deserializer);
        let mut var_issueOrder =
            <crate::cpu::latency_core::latency_args::IssueOrder>::sse_decode(deserializer);
        let mut var_issueNoMisspec = <bool>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::IssueConfig {
            issue_width: var_issueWidth,
            issue_order: var_issueOrder,
            issue_no_misspec: var_issueNoMisspec,
        };
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::IssueOrder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::cpu::latency_core::latency_args::IssueOrder::InOrder,
            1 => crate::cpu::latency_core::latency_args::IssueOrder::OutOrder,
            _ => unreachable!("Invalid variant for IssueOrder: {}", inner),
        };
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::LatencyArgs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_binaryPath = <String>::sse_decode(deserializer);
        let mut var_rsqSize = <Option<u16>>::sse_decode(deserializer);
        let mut var_lsqSize = <Option<u16>>::sse_decode(deserializer);
        let mut var_runConfig =
            <crate::cpu::latency_core::latency_args::RunConfig>::sse_decode(deserializer);
        let mut var_fetchConfig =
            <crate::cpu::latency_core::latency_args::FetchConfig>::sse_decode(deserializer);
        let mut var_decodeConfig =
            <crate::cpu::latency_core::latency_args::DecodeConfig>::sse_decode(deserializer);
        let mut var_issueConfig =
            <crate::cpu::latency_core::latency_args::IssueConfig>::sse_decode(deserializer);
        let mut var_commitConfig =
            <crate::cpu::latency_core::latency_args::CommitConfig>::sse_decode(deserializer);
        let mut var_functionalUnitPoolConfig =
            <crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig>::sse_decode(
                deserializer,
            );
        let mut var_memoryConfig =
            <crate::cpu::latency_core::latency_args::MemoryConfig>::sse_decode(deserializer);
        let mut var_cacheConfig =
            <crate::cpu::latency_core::latency_args::CacheConfig>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::LatencyArgs {
            binary_path: var_binaryPath,
            rsq_size: var_rsqSize,
            lsq_size: var_lsqSize,
            run_config: var_runConfig,
            fetch_config: var_fetchConfig,
            decode_config: var_decodeConfig,
            issue_config: var_issueConfig,
            commit_config: var_commitConfig,
            functional_unit_pool_config: var_functionalUnitPoolConfig,
            memory_config: var_memoryConfig,
            cache_config: var_cacheConfig,
        };
    }
}

impl SseDecode for Vec<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::MemoryConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_memoryBusWidth = <u8>::sse_decode(deserializer);
        let mut var_memoryLatency = <Option<Vec<u64>>>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::MemoryConfig {
            memory_bus_width: var_memoryBusWidth,
            memory_latency: var_memoryLatency,
        };
    }
}

impl SseDecode for Option<u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u16>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u64>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::cpu::latency_core::latency_args::RunConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fastForward = <Option<u64>>::sse_decode(deserializer);
        let mut var_maxInstrs = <Option<u64>>::sse_decode(deserializer);
        let mut var_statInterval = <Option<Vec<u64>>>::sse_decode(deserializer);
        let mut var_statFreq = <Option<u64>>::sse_decode(deserializer);
        return crate::cpu::latency_core::latency_args::RunConfig {
            fast_forward: var_fastForward,
            max_instrs: var_maxInstrs,
            stat_interval: var_statInterval,
            stat_freq: var_statFreq,
        };
    }
}

impl SseDecode for crate::api::simple::SimulationResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::cpu::register::XRegisterFile>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                let mut var_field2 = <String>::sse_decode(deserializer);
                return crate::api::simple::SimulationResult::Success(
                    var_field0, var_field1, var_field2,
                );
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::api::simple::SimulationResult::Error(var_field0, var_field1);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for [u64; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u64>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::cpu::register::XRegisterFile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_regs = <[u64; 32]>::sse_decode(deserializer);
        return crate::cpu::register::XRegisterFile { regs: var_regs };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire_run_simulation_functional_impl(port, ptr, rust_vec_len, data_len),
        2 => wire_run_simulation_latency_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::cpu::latency_core::components::cache::BlockReplacement
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Lru => 0.into_dart(),
            Self::Fifo => 1.into_dart(),
            Self::Random => 2.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::components::cache::BlockReplacement
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::components::cache::BlockReplacement>
    for crate::cpu::latency_core::components::cache::BlockReplacement
{
    fn into_into_dart(self) -> crate::cpu::latency_core::components::cache::BlockReplacement {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::CacheConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.il1.into_into_dart().into_dart(),
            self.dl1.into_into_dart().into_dart(),
            self.il2.into_into_dart().into_dart(),
            self.dl2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::CacheConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::CacheConfig>
    for crate::cpu::latency_core::latency_args::CacheConfig
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::CacheConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::components::cache::CacheOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::cpu::latency_core::components::cache::CacheOptions::None => {
                [0.into_dart()].into_dart()
            }
            crate::cpu::latency_core::components::cache::CacheOptions::Unified => {
                [1.into_dart()].into_dart()
            }
            crate::cpu::latency_core::components::cache::CacheOptions::Configured {
                num_sets,
                associativity,
                block_size,
                replacement_policy,
                latency,
            } => [
                2.into_dart(),
                num_sets.into_into_dart().into_dart(),
                associativity.into_into_dart().into_dart(),
                block_size.into_into_dart().into_dart(),
                replacement_policy.into_into_dart().into_dart(),
                latency.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::components::cache::CacheOptions
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::components::cache::CacheOptions>
    for crate::cpu::latency_core::components::cache::CacheOptions
{
    fn into_into_dart(self) -> crate::cpu::latency_core::components::cache::CacheOptions {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::CommitConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.commit_width.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::CommitConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::CommitConfig>
    for crate::cpu::latency_core::latency_args::CommitConfig
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::CommitConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::DecodeConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.decode_width.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::DecodeConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::DecodeConfig>
    for crate::cpu::latency_core::latency_args::DecodeConfig
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::DecodeConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::FetchConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fetch_queue_size.into_into_dart().into_dart(),
            self.fetch_speed.into_into_dart().into_dart(),
            self.fetch_branch_penalty.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::FetchConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::FetchConfig>
    for crate::cpu::latency_core::latency_args::FetchConfig
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::FetchConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.operation_latency.into_into_dart().into_dart(),
            self.issue_latency.into_into_dart().into_dart(),
            self.num_units.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg,
    > for crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg
{
    fn into_into_dart(
        self,
    ) -> crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.ialu.into_into_dart().into_dart(),
            self.imult.into_into_dart().into_dart(),
            self.idiv.into_into_dart().into_dart(),
            self.load.into_into_dart().into_dart(),
            self.store.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig,
    > for crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::IssueConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.issue_width.into_into_dart().into_dart(),
            self.issue_order.into_into_dart().into_dart(),
            self.issue_no_misspec.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::IssueConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::IssueConfig>
    for crate::cpu::latency_core::latency_args::IssueConfig
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::IssueConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::IssueOrder {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::InOrder => 0.into_dart(),
            Self::OutOrder => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::IssueOrder
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::IssueOrder>
    for crate::cpu::latency_core::latency_args::IssueOrder
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::IssueOrder {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::LatencyArgs {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.binary_path.into_into_dart().into_dart(),
            self.rsq_size.into_into_dart().into_dart(),
            self.lsq_size.into_into_dart().into_dart(),
            self.run_config.into_into_dart().into_dart(),
            self.fetch_config.into_into_dart().into_dart(),
            self.decode_config.into_into_dart().into_dart(),
            self.issue_config.into_into_dart().into_dart(),
            self.commit_config.into_into_dart().into_dart(),
            self.functional_unit_pool_config
                .into_into_dart()
                .into_dart(),
            self.memory_config.into_into_dart().into_dart(),
            self.cache_config.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::LatencyArgs
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::LatencyArgs>
    for crate::cpu::latency_core::latency_args::LatencyArgs
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::LatencyArgs {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::MemoryConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.memory_bus_width.into_into_dart().into_dart(),
            self.memory_latency.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::MemoryConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::MemoryConfig>
    for crate::cpu::latency_core::latency_args::MemoryConfig
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::MemoryConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::latency_core::latency_args::RunConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fast_forward.into_into_dart().into_dart(),
            self.max_instrs.into_into_dart().into_dart(),
            self.stat_interval.into_into_dart().into_dart(),
            self.stat_freq.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::latency_core::latency_args::RunConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::latency_core::latency_args::RunConfig>
    for crate::cpu::latency_core::latency_args::RunConfig
{
    fn into_into_dart(self) -> crate::cpu::latency_core::latency_args::RunConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::simple::SimulationResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::simple::SimulationResult::Success(field0, field1, field2) => [
                0.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::simple::SimulationResult::Error(field0, field1) => [
                1.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::SimulationResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::SimulationResult>
    for crate::api::simple::SimulationResult
{
    fn into_into_dart(self) -> crate::api::simple::SimulationResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::cpu::register::XRegisterFile {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.regs.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::cpu::register::XRegisterFile
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::cpu::register::XRegisterFile>
    for crate::cpu::register::XRegisterFile
{
    fn into_into_dart(self) -> crate::cpu::register::XRegisterFile {
        self
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::cpu::latency_core::components::cache::BlockReplacement {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::cpu::latency_core::components::cache::BlockReplacement::Lru => 0,
                crate::cpu::latency_core::components::cache::BlockReplacement::Fifo => 1,
                crate::cpu::latency_core::components::cache::BlockReplacement::Random => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::CacheConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::cpu::latency_core::components::cache::CacheOptions>::sse_encode(
            self.il1, serializer,
        );
        <crate::cpu::latency_core::components::cache::CacheOptions>::sse_encode(
            self.dl1, serializer,
        );
        <crate::cpu::latency_core::components::cache::CacheOptions>::sse_encode(
            self.il2, serializer,
        );
        <crate::cpu::latency_core::components::cache::CacheOptions>::sse_encode(
            self.dl2, serializer,
        );
    }
}

impl SseEncode for crate::cpu::latency_core::components::cache::CacheOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::cpu::latency_core::components::cache::CacheOptions::None => {
                <i32>::sse_encode(0, serializer);
            }
            crate::cpu::latency_core::components::cache::CacheOptions::Unified => {
                <i32>::sse_encode(1, serializer);
            }
            crate::cpu::latency_core::components::cache::CacheOptions::Configured {
                num_sets,
                associativity,
                block_size,
                replacement_policy,
                latency,
            } => {
                <i32>::sse_encode(2, serializer);
                <u64>::sse_encode(num_sets, serializer);
                <u64>::sse_encode(associativity, serializer);
                <u64>::sse_encode(block_size, serializer);
                <crate::cpu::latency_core::components::cache::BlockReplacement>::sse_encode(
                    replacement_policy,
                    serializer,
                );
                <u64>::sse_encode(latency, serializer);
            }
        }
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::CommitConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u8>>::sse_encode(self.commit_width, serializer);
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::DecodeConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u8>>::sse_encode(self.decode_width, serializer);
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::FetchConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u16>>::sse_encode(self.fetch_queue_size, serializer);
        <Option<u8>>::sse_encode(self.fetch_speed, serializer);
        <Option<u64>>::sse_encode(self.fetch_branch_penalty, serializer);
    }
}

impl SseEncode
    for crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.operation_latency, serializer);
        <u64>::sse_encode(self.issue_latency, serializer);
        <usize>::sse_encode(self.num_units, serializer);
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_encode(self.ialu, serializer);
        <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_encode(self.imult, serializer);
        <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_encode(self.idiv, serializer);
        <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_encode(self.load, serializer);
        <crate::cpu::latency_core::components::functional_unit_pool::FunctionalUnitGroupCfg>::sse_encode(self.store, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::IssueConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u8>>::sse_encode(self.issue_width, serializer);
        <crate::cpu::latency_core::latency_args::IssueOrder>::sse_encode(
            self.issue_order,
            serializer,
        );
        <bool>::sse_encode(self.issue_no_misspec, serializer);
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::IssueOrder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::cpu::latency_core::latency_args::IssueOrder::InOrder => 0,
                crate::cpu::latency_core::latency_args::IssueOrder::OutOrder => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::LatencyArgs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.binary_path, serializer);
        <Option<u16>>::sse_encode(self.rsq_size, serializer);
        <Option<u16>>::sse_encode(self.lsq_size, serializer);
        <crate::cpu::latency_core::latency_args::RunConfig>::sse_encode(
            self.run_config,
            serializer,
        );
        <crate::cpu::latency_core::latency_args::FetchConfig>::sse_encode(
            self.fetch_config,
            serializer,
        );
        <crate::cpu::latency_core::latency_args::DecodeConfig>::sse_encode(
            self.decode_config,
            serializer,
        );
        <crate::cpu::latency_core::latency_args::IssueConfig>::sse_encode(
            self.issue_config,
            serializer,
        );
        <crate::cpu::latency_core::latency_args::CommitConfig>::sse_encode(
            self.commit_config,
            serializer,
        );
        <crate::cpu::latency_core::latency_args::FunctionalUnitPoolConfig>::sse_encode(
            self.functional_unit_pool_config,
            serializer,
        );
        <crate::cpu::latency_core::latency_args::MemoryConfig>::sse_encode(
            self.memory_config,
            serializer,
        );
        <crate::cpu::latency_core::latency_args::CacheConfig>::sse_encode(
            self.cache_config,
            serializer,
        );
    }
}

impl SseEncode for Vec<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::MemoryConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u8>::sse_encode(self.memory_bus_width, serializer);
        <Option<Vec<u64>>>::sse_encode(self.memory_latency, serializer);
    }
}

impl SseEncode for Option<u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u16>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u64>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::cpu::latency_core::latency_args::RunConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u64>>::sse_encode(self.fast_forward, serializer);
        <Option<u64>>::sse_encode(self.max_instrs, serializer);
        <Option<Vec<u64>>>::sse_encode(self.stat_interval, serializer);
        <Option<u64>>::sse_encode(self.stat_freq, serializer);
    }
}

impl SseEncode for crate::api::simple::SimulationResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::simple::SimulationResult::Success(field0, field1, field2) => {
                <i32>::sse_encode(0, serializer);
                <crate::cpu::register::XRegisterFile>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
                <String>::sse_encode(field2, serializer);
            }
            crate::api::simple::SimulationResult::Error(field0, field1) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
        }
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for [u64; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u64>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::cpu::register::XRegisterFile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u64; 32]>::sse_encode(self.regs, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
